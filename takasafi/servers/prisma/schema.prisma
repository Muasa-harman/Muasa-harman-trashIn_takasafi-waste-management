datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Avatar {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  userId    String   @db.ObjectId @unique  // Add @unique to userId to resolve the one-to-one relation
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver    Driver?  @relation
  admin     Admin?   @relation
}


enum Role {
  USER
  ADMIN
  DRIVER
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String            @unique
  phoneNumber     Float?
  address         String?
  password        String
  avatar          Avatar?
  reviewsGiven    Reviews[]         @relation("Reviewer")
  reviewsReceived Reviews[]         @relation("ReviewedUser")
  role            Role
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  trucks          Truck[]           // Simplified relationship to Truck
  checkouts       Checkout[]        // Payments made by the user
  receipts        Receipt[]         // Receipts associated with the user
  truckRoutes     TruckRoute[]      // Relationship with TruckRoute
}

model Truck {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  licensePlate String          @unique
  model        String
  driverId     String          @db.ObjectId
  userId       String          @db.ObjectId    // Foreign key to User
  routes       TruckRoute[]    // Routes assigned to the truck (many-to-many relationship via TruckRoute)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  driver       Driver          @relation("DriverTrucks", fields: [driverId], references: [id])
  user         User            @relation(fields: [userId], references: [id]) // Relation field in Truck to User
}

model Driver {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  phoneNumber  Float?
  address      String?
  password     String
  avatar       Avatar?   @relation(fields: [avatarsId], references: [id])
  reviews      Reviews[] @relation("DriverReviews") // Reviews about the driver
  role         Role
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  trucks       Truck[]   @relation("DriverTrucks") // Trucks related to the driver
  avatarsId    String?   @db.ObjectId @unique // Mark avatarsId as unique
}

model Admin {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  avatar    Avatar?   @relation(fields: [avatarsId], references: [id])
  reviews   Reviews[] @relation("AdminReviews") // Reviews about the admin
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  avatarsId String?   @db.ObjectId @unique // Mark avatarsId as unique
}

model Reviews {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  rating         Int
  comment        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviewer       User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId     String   @db.ObjectId
  reviewedUser   User     @relation("ReviewedUser", fields: [reviewedUserId], references: [id])
  reviewedUserId String   @db.ObjectId
  driver         Driver?  @relation("DriverReviews", fields: [driverId], references: [id])
  driverId       String?  @db.ObjectId
  admin          Admin?   @relation("AdminReviews", fields: [adminId], references: [id])
  adminId        String?  @db.ObjectId

  @@index([reviewerId])
  @@index([reviewedUserId])
  @@index([driverId])
  @@index([adminId])
}

model Route {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  startPoint  String
  endPoint    String
  distance    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trucks      TruckRoute[]
}

model TruckRoute {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  truckId     String   @db.ObjectId
  userId      String   @db.ObjectId        // Foreign key to User
  routeId     String   @db.ObjectId
  assignedAt  DateTime @default(now())      // Date when the truck was assigned to the route
  truck       Truck    @relation(fields: [truckId], references: [id])
  route       Route    @relation(fields: [routeId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  checkouts   Checkout[] // Add this line
  receipts    Receipt[]  // Add this line

  @@index([truckId])
  @@index([userId])
  @@index([routeId])
}

model Checkout {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  truckRouteId    String    @db.ObjectId        // Foreign key to TruckRoute
  userId          String    @db.ObjectId        // Foreign key to User
  amount          Float                         // Payment amount
  paymentMethod   PaymentMethod                 // Enum for payment methods
  status          PaymentStatus                 // Enum for payment status
  transactionDate DateTime  @default(now())     // Timestamp for the transaction
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  truckRoute      TruckRoute  @relation(fields: [truckRouteId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  receipts        Receipt[]   // Receipts generated for this payment

  @@index([truckRouteId])
  @@index([userId])
}

enum PaymentMethod {
  CreditCard
  PayPal
  Mpesa
  BankTransfer
}

enum PaymentStatus {
  Pending
  Completed
  Failed
  Refunded
}

model Receipt {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  receiptNumber   String    @unique              // Unique receipt identifier
  checkoutId      String    @db.ObjectId        // Foreign key to Checkout
  truckRouteId    String    @db.ObjectId        // Foreign key to TruckRoute
  userId          String    @db.ObjectId        // Foreign key to User
  amount          Float                         // Payment amount
  issuedDate      DateTime  @default(now())     // Date the receipt was issued
  paymentMethod   PaymentMethod                 // Enum for payment methods
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  checkout        Checkout  @relation(fields: [checkoutId], references: [id])
  truckRoute      TruckRoute @relation(fields: [truckRouteId], references: [id])
  user            User      @relation(fields: [userId], references: [id])

  @@index([checkoutId])
  @@index([truckRouteId])
  @@index([userId])
}
