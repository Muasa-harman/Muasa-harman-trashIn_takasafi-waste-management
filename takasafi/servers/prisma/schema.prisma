generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model Avatars {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique @db.ObjectId
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  // phone_number Float? @unique  ===> we can't use this line because sometime our phone number is null and then we can't compare it
  phone_number Float?
  address      String?
  password     String
  avatar       Avatars?
  reviews      Reviews[]
  role         Role      @default(User)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([email, phone_number], name: "unique_email_phone_number") // In this approach, a composite unique constraint (@@unique) is created on both email and phone_number. This allows phone_number to be null but enforces uniqueness when phone_number is not null.
}

model Reviews {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  review String
  rating Float
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  track   Tracks  @relation(fields: [trackId], references: [id])
  trackId String @db.ObjectId
}

model Images {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  trackId    String @db.ObjectId
  track      Tracks  @relation(fields: [trackId], references: [id])
}

model Tracks {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  driver    String
  plate_number String
  price          Int
  on_demandPrice     Int?
  phone          String
  category       String
  images         Images[]
  companyId   String     @db.ObjectId
  company     Company @relation(fields: [companyId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Reviews        Reviews[]
}

model Company {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  country      String
  area_code       String
  address      String
  email        String   @unique
  phone_number Float    @unique
  role         Role      @default(Admin)
  password     String
  Tracks        Tracks[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}



users
id (Primary Key, UUID) — Unique user ID.
name (VARCHAR) — User's name.
email (VARCHAR, Unique) — User's email address.
password (VARCHAR) — User's hashed password.
role (ENUM: 'USER', 'MUNICIPALITY_ADMIN', 'COMPANY_ADMIN') — Role of the user.
created_at (TIMESTAMP) — Date when the user was created.

companies
id (Primary Key, UUID) — Unique company ID.
name (VARCHAR) — Company name.
address (VARCHAR) — Company address.
phone_number (VARCHAR) — Company contact number.
created_at (TIMESTAMP) — Date when the company was created.
admin_id (Foreign Key, references users(id)) — Refers to the admin responsible for the company.
municipality_admins
id (Primary Key, UUID) — Unique ID for municipality admin.
user_id (Foreign Key, references users(id)) — Refers to the user associated with the municipality admin.
municipality_name (VARCHAR) — Name of the municipality the admin is responsible for.
created_at (TIMESTAMP) — Date when the admin was created.

trucks
id (Primary Key, UUID) — Unique truck ID.
plate_number (VARCHAR) — License plate number.
company_id (Foreign Key, references companies(id)) — Refers to the company that owns the truck.
model (VARCHAR) — Truck model.
capacity (INT) — Capacity of the truck (in tons).
status (ENUM: 'AVAILABLE', 'IN_MAINTENANCE', 'ASSIGNED') — Current status of the truck.
created_at (TIMESTAMP) — Date when the truck was added.

routes
id (Primary Key, UUID) — Unique route ID.
route_name (VARCHAR) — Name of the route.
municipality_id (Foreign Key, references municipality_admins(id)) — Refers to the municipality that manages the route.
start_location (VARCHAR) — Starting point of the route.
end_location (VARCHAR) — Ending point of the route.
distance (DECIMAL) — Distance of the route in kilometers.
created_at (TIMESTAMP) — Date when the route was created.

truck_routes
id (Primary Key, UUID) — Unique ID for truck-route assignment.
truck_id (Foreign Key, references trucks(id)) — Refers to the truck assigned to the route.
route_id (Foreign Key, references routes(id)) — Refers to the route.
assigned_date (TIMESTAMP) — Date when the truck was assigned to the route.
status (ENUM: 'PENDING', 'IN_PROGRESS', 'COMPLETED') — Status of the truck on the route.
