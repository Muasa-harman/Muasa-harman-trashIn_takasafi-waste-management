generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model Avatars {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique @db.ObjectId
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  // phone_number Float? @unique  ===> we can't use this line because sometime our phone number is null and then we can't compare it
  phone_number Float?
  address      String?
  password     String
  avatar       Avatars?
  reviews      Reviews[]
  role         Role      @default(User)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([email, phone_number], name: "unique_email_phone_number") // In this approach, a composite unique constraint (@@unique) is created on both email and phone_number. This allows phone_number to be null but enforces uniqueness when phone_number is not null.
}

model Reviews {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  review String
  rating Float
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  track   Tracks  @relation(fields: [trackId], references: [id])
  trackId String @db.ObjectId
}

model Images {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  trackId    String @db.ObjectId
  track      Tracks  @relation(fields: [trackId], references: [id])
}

model Tracks {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  driver    String
  plate_number String
  price          Int
  on_demandPrice     Int?
  phone          String
  category       String
  images         Images[]
  companyId   String     @db.ObjectId
  company     Company @relation(fields: [companyId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Reviews        Reviews[]
}

model Company {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  country      String
  area_code       String
  address      String
  email        String   @unique
  phone_number Float    @unique
  role         Role      @default(Admin)
  password     String
  Tracks        Tracks[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}








generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model Avatar{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url String
  user User @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  //User
  //userId String @unique @db.ObjectId
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  phone_number String @unique
  address  String?
  password String
  avatar Avatar?
  role Role @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, phone_number], name: "unique_email_phone_number")

}


//name,email,password,avatar,role,phone_number,address,


model Admin {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  // phone_number Float? @unique  ===> we can't use this line because sometime our phone number is null and then we can't compare it
  phone_number Float?
  address      String?
  password     String
  Companies    Companies[]
  avatar       Avatars?
  reviews      Reviews[]
  role         Role      @default(Admin)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([email, phone_number], name: "unique_email_phone_number") // In this approach, a composite unique constraint (@@unique) is created on both email and phone_number. This allows phone_number to be null but enforces uniqueness when phone_number is not null.
}